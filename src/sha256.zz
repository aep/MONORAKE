using "../3rp/hacl-c/Hacl_SHA2_256.h" as hacl;
using <assert.h>::{assert};
using <string.h>::{memset};
using mem;

pub const usize HASHLEN   = 32;
pub const usize BLOCKLEN  = 64;

export fn hashlen() -> usize {
    return HASHLEN;
}

export fn blocklen() -> usize {
    return BLOCKLEN;
}

export struct Sha256 {
    u32 mut state[137];
    u8  mut block[64];
    u8  mut at;
}

export fn init(Sha256 mut new*self) {
    hacl::Hacl_SHA2_256_init(self->state);
    self->at = 0;
}

export fn update(Sha256 mut *self, u8 * mut data, usize mut l)
    where len(data) >= l
{
    static_attest(len(self->block) > self->at);
    static_attest(len(self->block) > 64 - self->at);

    for (;;) {
        usize fill = as<usize>(64 - self->at);
        if l >= fill {
            static_attest(len(data) > fill);
            mem::copy(data, self->block + self->at, fill);
            hacl::Hacl_SHA2_256_update(self->state, self->block);
            l    -= fill;
            data = data + fill;
            self->at = 0;
        } else {

            static_attest(len(self->block) > (usize)self->at);
            u8 mut *dst = self->block + self->at;
            static_attest(len(dst) > l);
            static_attest(safe(data));
            static_attest(len(data) > l);
            mem::copy(data, dst, l);
            self->at += (u8)l;
            break;
        }
    }
}

export fn finish(Sha256 mut unset<isinit> *self, u8 mut *out) {
    hacl::Hacl_SHA2_256_update_last(self->state, self->block, self->at);
    hacl::Hacl_SHA2_256_finish(self->state, out);
}


using err;
using string;
using <stdio.h>::{printf, FILE, fopen, fclose, fgets};
export fn hash_of_file(err::Err+et mut*e, char *fp, string::String+st mut*hex)
    where err::checked(*e)
    where st > 0
{
    new sha = init();
    FILE mut * f = fopen(fp, "r");
    if f == 0 {
        err::fail_with_errno(e, "cannot open %s", fp);
        return;
    }
    char mut buf[1000] = {0};
    for (;;) {
        if fgets(buf, static(len(buf)), f) == 0 {
            break;
        }
        static_attest(nullterm(buf));
        sha.update((u8 mut*)buf, string::strlen(buf));

    }
    fclose(f);

    u8 mut hash[32];
    sha.finish(hash);

    for (usize mut i = 0; i < 32; i++) {
        hex->format("%02x", hash[i]);
    }
}
